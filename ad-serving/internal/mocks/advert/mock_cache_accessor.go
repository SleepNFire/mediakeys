// Code generated by MockGen. DO NOT EDIT.
// Source: ../advert/rest.go
//
// Generated by this command:
//
//	mockgen -destination=./advert/mock_cache_accessor.go -package=advert_mock -source=../advert/rest.go CacheAccessor
//

// Package advert_mock is a generated GoMock package.
package advert_mock

import (
	reflect "reflect"

	pkg "github.com/SleepNFire/mediakeys/ad-serving/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheAccessor is a mock of CacheAccessor interface.
type MockCacheAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockCacheAccessorMockRecorder
}

// MockCacheAccessorMockRecorder is the mock recorder for MockCacheAccessor.
type MockCacheAccessorMockRecorder struct {
	mock *MockCacheAccessor
}

// NewMockCacheAccessor creates a new mock instance.
func NewMockCacheAccessor(ctrl *gomock.Controller) *MockCacheAccessor {
	mock := &MockCacheAccessor{ctrl: ctrl}
	mock.recorder = &MockCacheAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheAccessor) EXPECT() *MockCacheAccessorMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockCacheAccessor) Find(id string) (*pkg.AdvertData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*pkg.AdvertData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCacheAccessorMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCacheAccessor)(nil).Find), id)
}

// Store mocks base method.
func (m *MockCacheAccessor) Store(advert *pkg.AdvertData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", advert)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCacheAccessorMockRecorder) Store(advert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCacheAccessor)(nil).Store), advert)
}
