// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: grpcgen/print.proto

package print_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Impression_GetNumber_FullMethodName = "/Impression/GetNumber"
	Impression_Inc_FullMethodName       = "/Impression/Inc"
)

// ImpressionClient is the client API for Impression service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpressionClient interface {
	GetNumber(ctx context.Context, in *AdvertID, opts ...grpc.CallOption) (*AdvertPrint, error)
	Inc(ctx context.Context, in *AdvertID, opts ...grpc.CallOption) (*Message, error)
}

type impressionClient struct {
	cc grpc.ClientConnInterface
}

func NewImpressionClient(cc grpc.ClientConnInterface) ImpressionClient {
	return &impressionClient{cc}
}

func (c *impressionClient) GetNumber(ctx context.Context, in *AdvertID, opts ...grpc.CallOption) (*AdvertPrint, error) {
	out := new(AdvertPrint)
	err := c.cc.Invoke(ctx, Impression_GetNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impressionClient) Inc(ctx context.Context, in *AdvertID, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, Impression_Inc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpressionServer is the server API for Impression service.
// All implementations must embed UnimplementedImpressionServer
// for forward compatibility
type ImpressionServer interface {
	GetNumber(context.Context, *AdvertID) (*AdvertPrint, error)
	Inc(context.Context, *AdvertID) (*Message, error)
	mustEmbedUnimplementedImpressionServer()
}

// UnimplementedImpressionServer must be embedded to have forward compatible implementations.
type UnimplementedImpressionServer struct {
}

func (UnimplementedImpressionServer) GetNumber(context.Context, *AdvertID) (*AdvertPrint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumber not implemented")
}
func (UnimplementedImpressionServer) Inc(context.Context, *AdvertID) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inc not implemented")
}
func (UnimplementedImpressionServer) mustEmbedUnimplementedImpressionServer() {}

// UnsafeImpressionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpressionServer will
// result in compilation errors.
type UnsafeImpressionServer interface {
	mustEmbedUnimplementedImpressionServer()
}

func RegisterImpressionServer(s grpc.ServiceRegistrar, srv ImpressionServer) {
	s.RegisterService(&Impression_ServiceDesc, srv)
}

func _Impression_GetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpressionServer).GetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Impression_GetNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpressionServer).GetNumber(ctx, req.(*AdvertID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Impression_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvertID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpressionServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Impression_Inc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpressionServer).Inc(ctx, req.(*AdvertID))
	}
	return interceptor(ctx, in, info, handler)
}

// Impression_ServiceDesc is the grpc.ServiceDesc for Impression service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Impression_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Impression",
	HandlerType: (*ImpressionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumber",
			Handler:    _Impression_GetNumber_Handler,
		},
		{
			MethodName: "Inc",
			Handler:    _Impression_Inc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcgen/print.proto",
}
